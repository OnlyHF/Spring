<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<bean id="helloWorld" class="com.qzb.spring.ioc.HelloWorldImpl"/>
	<bean id="helloWorld2" class="com.qzb.spring.ioc.HelloWorldImpl" scope="singleton"/>
	<bean id="helloWorld3" class="com.qzb.spring.ioc.HelloWorldImpl" scope="prototype"/>
	<bean id="helloService" class="com.qzb.spring.ioc.HelloServiceImpl">
		<property name="helloWorld" ref="helloWorld"/>
	</bean>
	<bean id="helloServiceFactory" class="com.qzb.spring.ioc.HelloServiceFactory" factory-method="createBean"/>
	<bean id="helloServiceFactory2" class="com.qzb.spring.ioc.HelloServiceFactory2"/>
	<bean id="helloService2" factory-bean="helloServiceFactory2" factory-method="createBean"/>

	<bean id="person1" class="com.qzb.spring.ioc.Person">
		<property name="name" value="张三"></property>
		<property name="age" value="26"></property>
	</bean>

	<bean id="person2" class="com.qzb.spring.ioc.Person">
		<constructor-arg index="0" value="李四"></constructor-arg>
		<constructor-arg name="age" value="25"></constructor-arg>
	</bean>

	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.qzb.spring.ioc"/>

	<!-- aop动态代理 -->
	<bean id="hello" class="com.qzb.spring.ioc.proxy.jdk.HelloImpl"/>
	<bean id="myAspect" class="com.qzb.spring.ioc.proxy.aop.MyAspect"/>
	<bean id="helloProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="com.qzb.spring.ioc.proxy.jdk.Hello"/>
		<property name="target" ref="hello"/>
		<property name="interceptorNames" value="myAspect"/>
		<!-- 如何生成代理，true:使用cglib; false :使用jdk动态代理 -->
		<property name="proxyTargetClass" value="true"/>
	</bean>

	<bean id="xmlMyAspect" class="com.qzb.spring.aspectj.xml.MyAspect"/>
	<!-- AspectJ实现AOP功能 -->
	<aop:config>
		<aop:aspect ref="xmlMyAspect">
			<!-- 配置切入点，通知最后增强哪些方法 -->
			<aop:pointcut id="xmlPointCut" expression="execution ( * com.qzb.spring.ioc.*.* (..))"/>
			<!--前置通知，关联通知 Advice和切入点PointCut -->
			<aop:before method="before" pointcut-ref="xmlPointCut"/>
			<!--后置通知，在方法返回之后执行，就可以获得返回值returning 属性 -->
			<aop:after-returning method="afterReturning" pointcut-ref="xmlPointCut"/>
			<!--环绕通知 -->
			<aop:around method="around" pointcut-ref="xmlPointCut"/>
			<!--抛出通知：用于处理程序发生异常，可以接收当前方法产生的异常 -->
			<!-- *注意：如果程序没有异常，则不会执行增强 -->
			<!-- * throwing属性：用于设置通知第二个参数的名称，类型Throwable -->
			<aop:after-throwing method="afterThrowing" pointcut-ref="xmlPointCut" throwing="e" />
			<!--最终通知：无论程序发生任何事情，都将执行 -->
			<aop:after method="after" pointcut-ref="xmlPointCut" />
		</aop:aspect>
	</aop:config>

</beans>